<?php

namespace App\Entities;

use Illuminate\Notifications\Notifiable;
use Laravel\Passport\HasApiTokens;
use Mockery\Exception;
use Vinelab\NeoEloquent\Eloquent\Model as NeoEloquent;
use Vinelab\NeoEloquent\Eloquent\SoftDeletes;
use App\Entities\Category;
class Book extends NeoEloquent
{
    use HasApiTokens, Notifiable, SoftDeletes;
    protected $label = 'Book';


    protected $dates = ['deleted_at'];
    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'id',
        'title',
        'url_thumbnail',
        'url_cover',
        'description',
        'price',
        'author',
        'quantity',
        'rating',
        'created_at',
        'updated_at'
    ];


    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'created_at',
        'updated_at'
    ];

    public function setCategory(){
        return $this->belongsTo(Category::class,'BELONGSTO_CATEGORY');
    }

    public function category(){
        return $this->belongsTo(Category::class,'BELONGSTO_CATEGORY');
    }

    public function setReceiver(){
        return $this->hasOne(User::class,'NEED_BOOK');
    }

    public function receiver(){
        return $this->hasMany(User::class,'NEED_BOOK');
    }

    public function setGiver(){
        return $this->belongsTo(User::class,'GIVE_BOOK');
    }

    public function giver(){
        return $this->belongsTo(User::class,'GIVE_BOOK');
    }

    /**
     * @param $book
     * @return \Illuminate\Http\JsonResponse|string
     * @description create or update book information
     */
    public function createOrUpdate($book)
    {
        try {
            $existBoook = $this->where('id', $book)->first();
            if ($existBoook) {
                $existBoook->update(array(
                    'name' => $book->name,
                    'url_thumbnail' => $book->url_thumbnail,
                    'url_cover' => $book->url_cover,
                    'description' => $book->description,
                    'price' => $book->price,
                    'author' => $book->author,
                    'quantity' => $book->quantity,
                    'rating' => $book->rating,
                    'created_at' => date('Y-m-d H:i:s'),
                    'updated_at' => date('Y-m-d H:i:s')
                ));
            } else {
                $this->create(array(
                    'name' => $book->name,
                    'url_thumbnail' => $book->url_thumbnail,
                    'url_cover' => $book->url_cover,
                    'description' => $book->description,
                    'price' => $book->price,
                    'author' => $book->author,
                    'quantity' => $book->quantity,
                    'rating' => $book->rating,
                    'created_at' => date('Y-m-d H:i:s'),
                    'updated_at' => date('Y-m-d H:i:s')
                ));
            }
        } catch (Exception $e) {
            return $e->getMessage();
        } catch (\Everyman\Neo4j\Exception $e) {
            return response()->json($e->getMessage());
        }
    }

    // public static function create(array $attributes = [])
    // {
    //     $attributes['id'] = rand(100000000,999999999).time();
    //     $attributes['created_at'] = time();
    //     $attributes['updated_at'] = time();
    //     return parent::create($attributes); // TODO: Change the autogenerated stub
    // }

    // public function update(array $attributes = [], array $options = [])
    // {
    //     $attributes['updated_at'] = time();
    //     return parent::update($attributes, $options); // TODO: Change the autogenerated stub
    // }
}
